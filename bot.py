import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, ReplyKeyboardRemove
)
import requests
import os

BOT_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"
MEDIA_PATH = "/var/www/china_cars/media/cars/"

bot = telebot.TeleBot(BOT_TOKEN)

# user_state[user_id] = {
#   "step": str,
#   "filters": dict,
#   "cars": list,
#   "index": int,
#   "msg_id": int,        # id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
# }
user_state = {}
favorites = {}  # {user_id: [car, ...]}

# --- –º–∞–ø–ø–∏–Ω–≥–∏ ---
FUEL_MAP = {"petrol": "petrol", "diesel": "diesel", "gas": "gas", "electric": "electric"}
COLOR_MAP = {"–ö—Ä–∞—Å–Ω—ã–π": "red", "–°–∏–Ω–∏–π": "blue", "–ß–µ—Ä–Ω—ã–π": "black", "–ë–µ–ª—ã–π": "white"}
COND_MAP  = {"–ù–æ–≤—ã–π": "new", "–ë/–£": "used"}
PRICE_MAP = {"5000‚Äì10000": (5000, 10000), "10000‚Äì15000": (10000, 15000), "15000‚Äì20000": (15000, 20000)}

# -------------------- helpers --------------------
def car_caption(car: dict) -> str:
    return (
        f"üöó {car['brand']} {car['model']}\n"
        f"üìÖ –ì–æ–¥: {car['year']}\n"
        f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['engine_capacity']} –ª\n"
        f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}\n"
        f"üé® –¶–≤–µ—Ç: {car.get('color', '‚Äî')}\n"
        f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ù–æ–≤—ã–π' if car.get('condition') == 'new' else '–ë/–£'}\n"
        f"üí∞ –¶–µ–Ω–∞: {car['price']} KGS\n"
        f"üìù {car['description']}"
    )

def nav_markup(state) -> InlineKeyboardMarkup:
    m = InlineKeyboardMarkup()
    if state["index"] > 0:
        m.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"))
    if state["index"] < len(state["cars"]) - 1:
        m.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="next"))
    m.add(InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorite"))
    return m

def send_car_message(user_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–π –º–∞—à–∏–Ω–æ–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç msg_id."""
    st = user_state[user_id]
    car = st["cars"][st["index"]]
    caption = car_caption(car)
    markup = nav_markup(st)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç
    if car.get("image"):
        filename = os.path.basename(car["image"])
        file_path = os.path.join(MEDIA_PATH, filename)
        try:
            if os.path.exists(file_path):
                with open(file_path, "rb") as f:
                    msg = bot.send_photo(user_id, f, caption=caption, reply_markup=markup)
            else:
                msg = bot.send_photo(user_id, car["image"], caption=caption, reply_markup=markup)
            st["msg_id"] = msg.message_id
            return
        except Exception:
            pass  # —É–ø–∞–¥—ë–º –≤ —Ç–µ–∫—Å—Ç

    msg = bot.send_message(user_id, caption, reply_markup=markup)
    st["msg_id"] = msg.message_id

def update_car_message(user_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ–Ω—è–µ—Ç —Ñ–æ—Ç–æ/–ø–æ–¥–ø–∏—Å—å. –ü—Ä–∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äì —à–ª—ë—Ç –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ."""
    st = user_state[user_id]
    car = st["cars"][st["index"]]
    caption = car_caption(car)
    markup = nav_markup(st)
    msg_id = st.get("msg_id")

    # –µ—Å–ª–∏ –Ω–µ—Ç id —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
    if not msg_id:
        send_car_message(user_id)
        return

    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å media (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å)
    if car.get("image"):
        filename = os.path.basename(car["image"])
        file_path = os.path.join(MEDIA_PATH, filename)
        try:
            if os.path.exists(file_path):
                with open(file_path, "rb") as f:
                    bot.edit_message_media(
                        media=InputMediaPhoto(f, caption=caption),
                        chat_id=user_id,
                        message_id=msg_id,
                        reply_markup=markup
                    )
            else:
                bot.edit_message_media(
                    media=InputMediaPhoto(car["image"], caption=caption),
                    chat_id=user_id,
                    message_id=msg_id,
                    reply_markup=markup
                )
            return
        except Exception:
            # –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–º) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ
            try:
                bot.delete_message(user_id, msg_id)
            except Exception:
                pass
            send_car_message(user_id)
            return

    # –ï—Å–ª–∏ —É —Ç–µ–∫—É—â–µ–≥–æ –∞–≤—Ç–æ –Ω–µ—Ç —Ñ–æ—Ç–æ: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å caption)
    try:
        bot.edit_message_caption(
            caption=caption,
            chat_id=user_id,
            message_id=msg_id,
            reply_markup=markup
        )
    except Exception:
        # –µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ–ª—å–∑—è ‚Äì —à–ª—ë–º –Ω–æ–≤–æ–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        try:
            bot.delete_message(user_id, msg_id)
        except Exception:
            pass
        send_car_message(user_id)

# -------------------- commands --------------------
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "category", "filters": {}}

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ Reply-–∫–ª–∞–≤—ã (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
    try:
        bot.send_message(user_id, "–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    except Exception:
        pass

    markup = InlineKeyboardMarkup()
    for cat in ["sedan", "suv", "hatchback", "minivan"]:
        markup.add(InlineKeyboardButton(cat, callback_data=f"category:{cat}"))
    markup.add(InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ", callback_data="show_favorites"))

    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:", reply_markup=markup)

@bot.message_handler(commands=['favorites'])
def favorites_cmd(message):
    send_favorites(message.chat.id)

# -------------------- favorites --------------------
def send_favorites(user_id: int):
    user_favs = favorites.get(user_id, [])
    if not user_favs:
        bot.send_message(user_id, "‚≠ê –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω.")
        return

    bot.send_message(user_id, f"‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ ({len(user_favs)}):")
    for idx, car in enumerate(user_favs):
        caption = car_caption(car)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_fav:{idx}"))

        if car.get("image"):
            filename = os.path.basename(car["image"])
            file_path = os.path.join(MEDIA_PATH, filename)
            try:
                if os.path.exists(file_path):
                    with open(file_path, "rb") as f:
                        bot.send_photo(user_id, f, caption=caption, reply_markup=markup)
                else:
                    bot.send_photo(user_id, car["image"], caption=caption, reply_markup=markup)
                continue
            except Exception:
                pass
        bot.send_message(user_id, caption, reply_markup=markup)

# -------------------- callbacks --------------------
@bot.callback_query_handler(func=lambda call: True)
def cb(call):
    user_id = call.message.chat.id
    state = user_state.get(user_id)

    # –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –º–µ–Ω—é
    if call.data == "show_favorites":
        send_favorites(user_id)
        bot.answer_callback_query(call.id)
        return

    # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    if call.data.startswith("del_fav:"):
        idx = int(call.data.split(":")[1])
        if user_id in favorites and 0 <= idx < len(favorites[user_id]):
            removed = favorites[user_id].pop(idx)
            bot.answer_callback_query(call.id, f"üóë {removed['brand']} {removed['model']} —É–¥–∞–ª—ë–Ω")
            try:
                bot.delete_message(user_id, call.message.id)
            except Exception:
                pass
        return

    if not state:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        bot.answer_callback_query(call.id)
        return

    step = state["step"]

    # 1) –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    if call.data.startswith("category:") and step == "category":
        state["filters"]["category"] = call.data.split(":")[1]
        state["step"] = "fuel"
        m = InlineKeyboardMarkup()
        for f in FUEL_MAP:
            m.add(InlineKeyboardButton(f, callback_data=f"fuel:{f}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", user_id, call.message.id, reply_markup=m)
        bot.answer_callback_query(call.id)
        return

    # 2) —Ç–æ–ø–ª–∏–≤–æ
    if call.data.startswith("fuel:") and step == "fuel":
        fuel = call.data.split(":")[1]
        state["filters"]["fuel_type"] = FUEL_MAP[fuel]
        state["step"] = "color"
        m = InlineKeyboardMarkup()
        for c in COLOR_MAP:
            m.add(InlineKeyboardButton(c, callback_data=f"color:{c}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∞–≤—Ç–æ:", user_id, call.message.id, reply_markup=m)
        bot.answer_callback_query(call.id)
        return

    # 3) —Ü–≤–µ—Ç
    if call.data.startswith("color:") and step == "color":
        color = call.data.split(":")[1]
        state["filters"]["color"] = COLOR_MAP[color]
        state["step"] = "condition"
        m = InlineKeyboardMarkup()
        for c in COND_MAP:
            m.add(InlineKeyboardButton(c, callback_data=f"condition:{c}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ:", user_id, call.message.id, reply_markup=m)
        bot.answer_callback_query(call.id)
        return

    # 4) —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if call.data.startswith("condition:") and step == "condition":
        cond = call.data.split(":")[1]
        state["filters"]["condition"] = COND_MAP[cond]
        state["step"] = "price"
        m = InlineKeyboardMarkup()
        for p in PRICE_MAP:
            m.add(InlineKeyboardButton(p, callback_data=f"price:{p}"))
        bot.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (KGS):", user_id, call.message.id, reply_markup=m)
        bot.answer_callback_query(call.id)
        return

    # 5) —Ü–µ–Ω–∞ ‚Üí –≤—ã–¥–∞—á–∞
    if call.data.startswith("price:") and step == "price":
        price = call.data.split(":")[1]
        price_min, price_max = PRICE_MAP[price]
        state["filters"]["price_min"] = price_min
        state["filters"]["price_max"] = price_max
        state["step"] = "done"

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏, —á—Ç–æ–±—ã ¬´–∫–Ω–æ–ø–∫–∏ —Ü–µ–Ω¬ª –∏—Å—á–µ–∑–ª–∏
        try:
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.id, reply_markup=None)
        except Exception:
            pass

        # –∑–∞–ø—Ä–æ—Å –∫ API
        try:
            r = requests.get(API_URL, params=state["filters"], timeout=10)
            r.raise_for_status()
            state["cars"] = r.json()
            state["index"] = 0
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            user_state.pop(user_id, None)
            bot.answer_callback_query(call.id)
            return

        if state["cars"]:
            send_car_message(user_id)     # –ø—Ä–∏—Å—ã–ª–∞–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π
        else:
            bot.send_message(user_id, "‚ùå –ê–≤—Ç–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            user_state.pop(user_id, None)

        bot.answer_callback_query(call.id)
        return

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if call.data in ("prev", "next") and state.get("cars"):
        if call.data == "prev" and state["index"] > 0:
            state["index"] -= 1
        elif call.data == "next" and state["index"] < len(state["cars"]) - 1:
            state["index"] += 1
        update_car_message(user_id)
        bot.answer_callback_query(call.id)
        return

    # –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if call.data == "favorite" and state.get("cars"):
        car = state["cars"][state["index"]]
        favs = favorites.setdefault(user_id, [])
        if car not in favs:
            favs.append(car)
            bot.answer_callback_query(call.id, "‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            bot.answer_callback_query(call.id, "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ‚úÖ")
        return

# -------------------- run --------------------
bot.polling(none_stop=True)
