import asyncio
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

API_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üöò –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã", callback_data="show_cars")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –º–∞—à–∏–Ω üöó", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—à–∏–Ω—ã"
@dp.callback_query(lambda c: c.data == "show_cars")
async def show_cars(callback: types.CallbackQuery):
    async with aiohttp.ClientSession() as session:
        async with session.get(API_URL) as resp:
            try:
                cars = await resp.json()
            except Exception:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞")
                return

    if not cars:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –º–∞—à–∏–Ω –≤ –±–∞–∑–µ ‚ùå")
        return

    for car in cars:
        caption = f"""
üöó {car.get('brand','')} {car.get('model','')}
üí∞ –¶–µ–Ω–∞: {car.get('price','')} KGS
üìç –ì–æ—Ä–æ–¥: {car.get('city','')}
üìù {car.get('description','')}
"""
        image_url = car.get("image", "")
        if image_url and not image_url.startswith("http"):
            image_url = f"http://217.25.93.75:8080{image_url}"

        try:
            if image_url:
                # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –ø–∞–º—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                async with aiohttp.ClientSession() as img_session:
                    async with img_session.get(image_url) as img_resp:
                        if img_resp.status == 200:
                            content = await img_resp.read()
                            file = BufferedInputFile(content, filename="car.png")
                            await callback.message.answer_photo(photo=file, caption=caption)
                        else:
                            await callback.message.answer(f"{caption}\n‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            else:
                await callback.message.answer(f"{caption}\n‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        except Exception as e:
            await callback.message.answer(f"{caption}\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
