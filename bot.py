import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests

BOT_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"  # –ø—Ä–æ–¥–∞–∫—à–Ω URL —á–µ—Ä–µ–∑ Nginx

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_id: {step, filters}}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–æ–∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –º–æ–¥–µ–ª–∏
CATEGORY_MAP = {"–°–µ–¥–∞–Ω": "sedan", "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": "suv", "–ú–∏–Ω–∏–≤—ç–Ω": "minivan"}
FUEL_MAP = {"–ë–µ–Ω–∑–∏–Ω": "petrol", "–î–∏–∑–µ–ª—å": "diesel", "–ì–∞–∑": "gas", "–≠–ª–µ–∫—Ç—Ä–æ": "electric"}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "category", "filters": {}}

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–µ–¥–∞–Ω"), KeyboardButton("–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"), KeyboardButton("–ú–∏–Ω–∏–≤—ç–Ω"))
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@bot.message_handler(func=lambda msg: True)
def handle(message):
    user_id = message.chat.id
    state = user_state.get(user_id)

    if not state:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        return

    step = state["step"]

    # 1Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if step == "category":
        selected = CATEGORY_MAP.get(message.text)
        if not selected:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–Ω–æ–ø–æ–∫.")
            return

        state["filters"]["category"] = selected
        state["step"] = "fuel"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–≠–ª–µ–∫—Ç—Ä–æ")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        return

    # 2Ô∏è‚É£ –¢–æ–ø–ª–∏–≤–æ
    if step == "fuel":
        selected = FUEL_MAP.get(message.text)
        if not selected:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ —Å –∫–Ω–æ–ø–æ–∫.")
            return

        state["filters"]["fuel_type"] = selected
        state["step"] = "price"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("5000‚Äì10000$", "10000‚Äì15000$", "15000‚Äì20000$")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:", reply_markup=markup)
        return

    # 3Ô∏è‚É£ –¶–µ–Ω–∞
    if step == "price":
        try:
            price_range = message.text.replace("$", "").split("‚Äì")
            state["filters"]["price_min"] = price_range[0]
            state["filters"]["price_max"] = price_range[1]
        except Exception:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å –∫–Ω–æ–ø–æ–∫.")
            return

        state["step"] = "done"
        filters = state["filters"]

        # --- –ó–∞–ø—Ä–æ—Å –∫ API ---
        try:
            response = requests.get(API_URL, params=filters, timeout=5)
            response.raise_for_status()
            cars = response.json()
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            user_state.pop(user_id, None)
            return

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
        if cars:
            for car in cars:
                caption = (
                    f"üöó {car['brand']} {car['model']} ({car['year']})\n"
                    f"üí∞ –¶–µ–Ω–∞: {car['price']} $\n"
                    f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {car['category']}\n"
                    f"‚ö° –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}"
                )
                # –§–æ—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π URL
                if car.get("image"):
                    bot.send_photo(user_id, car["image"], caption=caption)
                else:
                    bot.send_message(user_id, caption)
        else:
            bot.send_message(user_id, "‚ùå –ê–≤—Ç–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state.pop(user_id, None)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling(none_stop=True)
