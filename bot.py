import telebot
import requests
from io import BytesIO

TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"

bot = telebot.TeleBot(TOKEN)

# ====== –§–∏–ª—å—Ç—Ä—ã ======
user_filters = {}

CATEGORIES = ["–õ–µ–≥–∫–æ–≤—ã–µ", "–ì—Ä—É–∑–æ–≤—ã–µ", "–ê–≤—Ç–æ–±—É—Å—ã"]
FUEL_TYPES = ["–ë–µ–Ω–∑–∏–Ω", "–ì–∞–∑", "–î–∏–∑–µ–ª—å"]
PRICE_RANGES = {
    "10-15 —Ç—ã—Å": (10000, 15000),
    "15-20 —Ç—ã—Å": (15000, 20000),
    "20-30 —Ç—ã—Å": (20000, 30000)
}


# ====== –°—Ç–∞—Ä—Ç ======
@bot.message_handler(commands=["start"])
def start(message):
    user_filters[message.chat.id] = {}
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for c in CATEGORIES:
        markup.add(c)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


# ====== –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ======
@bot.message_handler(func=lambda m: m.text in CATEGORIES)
def choose_category(message):
    user_filters[message.chat.id]["category"] = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for f in FUEL_TYPES:
        markup.add(f)
    bot.send_message(message.chat.id, "‚õΩ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ª–∏–≤–æ:", reply_markup=markup)


# ====== –í—ã–±–æ—Ä —Ç–æ–ø–ª–∏–≤–∞ ======
@bot.message_handler(func=lambda m: m.text in FUEL_TYPES)
def choose_fuel(message):
    user_filters[message.chat.id]["fuel"] = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for p in PRICE_RANGES.keys():
        markup.add(p)
    bot.send_message(message.chat.id, "üí∞ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:", reply_markup=markup)


# ====== –í—ã–±–æ—Ä —Ü–µ–Ω—ã ======
@bot.message_handler(func=lambda m: m.text in PRICE_RANGES.keys())
def choose_price(message):
    user_filters[message.chat.id]["price"] = message.text
    send_filtered_cars(message.chat.id)


# ====== –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ ======
def send_filtered_cars(user_id):
    filters = user_filters.get(user_id, {})
    bot.send_message(user_id, "üîé –ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ...")

    try:
        response = requests.get(API_URL, timeout=5)
        response.raise_for_status()
        cars = response.json()
    except Exception as e:
        bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    min_p, max_p = PRICE_RANGES[filters["price"]]

    results = []
    for car in cars:
        if (
            car.get("category") == filters["category"]
            and car.get("fuel") == filters["fuel"]
            and min_p <= float(car.get("price", 0)) <= max_p
        ):
            results.append(car)

    if not results:
        bot.send_message(user_id, "üö´ –ê–≤—Ç–æ –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    for car in results:
        caption = (
            f"üöó {car.get('brand', '')} {car.get('model', '')}\n"
            f"üí∞ –¶–µ–Ω–∞: {car.get('price', '')} KGS\n"
            f"üìç –ì–æ—Ä–æ–¥: {car.get('city', '')}\n"
            f"üìù {car.get('description', '')}"
        )

        if car.get("image"):
            try:
                resp = requests.get(car["image"], timeout=5)
                if resp.status_code == 200 and "image" in resp.headers.get("Content-Type", ""):
                    photo = BytesIO(resp.content)
                    photo.seek(0)
                    bot.send_photo(user_id, photo, caption=caption)
                else:
                    bot.send_message(user_id, f"‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n{caption}")
            except Exception as e:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {e}\n{caption}")
        else:
            bot.send_message(user_id, caption)


# ====== –ó–∞–ø—É—Å–∫ ======
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
