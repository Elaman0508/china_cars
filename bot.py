import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests

BOT_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}  # {user_id: {"step": ..., "filters": {...}}}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "category", "filters": {}}

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("sedan", "suv", "hatchback", "minivan")
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@bot.message_handler(func=lambda msg: True)
def handle(message):
    user_id = message.chat.id
    state = user_state.get(user_id)
    if not state:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        return

    step = state["step"]

    # 1Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if step == "category":
        state["filters"]["category"] = message.text.lower()
        state["step"] = "fuel"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("petrol", "diesel", "gas", "electric")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        return

    # 2Ô∏è‚É£ –¢–æ–ø–ª–∏–≤–æ
    if step == "fuel":
        state["filters"]["fuel_type"] = message.text.lower()
        state["step"] = "price"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("5000‚Äì10000", "10000‚Äì15000", "15000‚Äì20000")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (KGS):", reply_markup=markup)
        return

    # 3Ô∏è‚É£ –¶–µ–Ω–∞
    if step == "price":
        state["filters"]["price"] = message.text
        state["step"] = "done"

        # --- –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –≤ min/max ---
        price_range = state["filters"]["price"].split("‚Äì")
        filters = state["filters"]
        filters["price_min"] = price_range[0]
        filters["price_max"] = price_range[1]
        filters.pop("price")

        # --- –∑–∞–ø—Ä–æ—Å –∫ API ---
        try:
            response = requests.get(API_URL, params=filters, timeout=10)
            if response.status_code != 200:
                bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                user_state.pop(user_id, None)
                return

            try:
                cars = response.json()
            except ValueError:
                bot.send_message(user_id, f"‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:\n{response.text[:200]}")
                user_state.pop(user_id, None)
                return

        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            user_state.pop(user_id, None)
            return

        # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ ---
        if cars:
            for car in cars:
                caption = (
                    f"üöó {car['brand']} {car['model']}\n"
                    f"üìÖ –ì–æ–¥: {car['year']}\n"
                    f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['engine_capacity']} –ª\n"
                    f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {car['price']} KGS\n"
                    f"üìù {car['description']}"
                )
                if car.get("image"):
                    try:
                        bot.send_photo(user_id, car["image"], caption=caption)
                    except Exception as e:
                        bot.send_message(user_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}\n{car['image']}")
                        bot.send_message(user_id, caption)
                else:
                    bot.send_message(user_id, caption)
        else:
            bot.send_message(user_id, "‚ùå –ê–≤—Ç–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state.pop(user_id, None)

bot.polling(none_stop=True)
