import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests
import os

BOT_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"
MEDIA_PATH = "/var/www/china_cars/media/cars/"  # –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}  # {user_id: {"step": ..., "filters": {...}}}

# --- /start ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "category", "filters": {}}

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("sedan", "suv", "hatchback", "minivan")
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:", reply_markup=markup)

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda msg: True)
def handle(message):
    user_id = message.chat.id
    state = user_state.get(user_id)
    if not state:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        return

    step = state["step"]

    # 1Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if step == "category":
        state["filters"]["category"] = message.text.lower()
        state["step"] = "fuel"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("petrol", "diesel", "gas", "electric")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        return

    # 2Ô∏è‚É£ –¢–æ–ø–ª–∏–≤–æ
    if step == "fuel":
        state["filters"]["fuel_type"] = message.text.lower()
        state["step"] = "color"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ß–µ—Ä–Ω—ã–π", "–ë–µ–ª—ã–π")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∞–≤—Ç–æ:", reply_markup=markup)
        return

    # 3Ô∏è‚É£ –¶–≤–µ—Ç
    if step == "color":
        state["filters"]["color"] = message.text.lower()
        state["step"] = "condition"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ù–æ–≤—ã–π", "–ë/–£")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ:", reply_markup=markup)
        return

    # 4Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ
    if step == "condition":
        state["filters"]["condition"] = "new" if message.text.lower() == "–Ω–æ–≤—ã–π" else "used"
        state["step"] = "price"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("5000‚Äì10000", "10000‚Äì15000", "15000‚Äì20000")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã (KGS):", reply_markup=markup)
        return

    # 5Ô∏è‚É£ –¶–µ–Ω–∞
    if step == "price":
        state["filters"]["price"] = message.text
        state["step"] = "done"

        price_range = state["filters"]["price"].split("‚Äì")
        filters = state["filters"]
        filters["price_min"] = price_range[0]
        filters["price_max"] = price_range[1]
        filters.pop("price")

        try:
            response = requests.get(API_URL, params=filters, timeout=10)
            response.raise_for_status()
            cars = response.json()
        except Exception as e:
            bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
            user_state.pop(user_id, None)
            return

        if cars:
            for car in cars:
                caption = (
                    f"üöó {car['brand']} {car['model']}\n"
                    f"üìÖ –ì–æ–¥: {car['year']}\n"
                    f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['engine_capacity']} –ª\n"
                    f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}\n"
                    f"üé® –¶–≤–µ—Ç: {car.get('color', '‚Äî')}\n"
                    f"üìå –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ù–æ–≤—ã–π' if car.get('condition')=='new' else '–ë/–£'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {car['price']} KGS\n"
                    f"üìù {car['description']}"
                )

                # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ ---
                if car.get("image"):
                    filename = os.path.basename(car["image"])
                    file_path = os.path.join(MEDIA_PATH, filename)
                    if os.path.exists(file_path):
                        with open(file_path, "rb") as f:
                            bot.send_photo(user_id, f, caption=caption)
                    else:
                        # fallback: –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ
                        try:
                            bot.send_photo(user_id, car["image"], caption=caption)
                        except:
                            bot.send_message(user_id, f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n{caption}")
                else:
                    bot.send_message(user_id, caption)
        else:
            bot.send_message(user_id, "‚ùå –ê–≤—Ç–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state.pop(user_id, None)

bot.polling(none_stop=True)
