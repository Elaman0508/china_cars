import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import requests
from io import BytesIO

BOT_TOKEN = "7988730577:AAE6aA6WWt2JL0rNk6eXrTjGn7sXLNDsnAo"
API_URL = "http://217.25.93.75/api/cars/"

bot = telebot.TeleBot(BOT_TOKEN)
user_state = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è {user_id: {step, filters}}

# --- –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ API ---
fuel_map = {
    "–±–µ–Ω–∑–∏–Ω": "petrol",
    "–¥–∏–∑–µ–ª—å": "diesel",
    "–≥–∞–∑": "gas",
    "—ç–ª–µ–∫—Ç—Ä–æ": "electric"
}

category_map = {
    "—Å–µ–¥–∞–Ω": "sedan",
    "–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫": "suv",
    "–º–∏–Ω–∏–≤—ç–Ω": "minivan"
}

price_map = {
    "5000‚Äì10000$": (5000, 10000),
    "10000‚Äì15000$": (10000, 15000),
    "15000‚Äì20000$": (15000, 20000)
}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    user_state[user_id] = {"step": "category", "filters": {}}

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–°–µ–¥–∞–Ω"), KeyboardButton("–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫"), KeyboardButton("–ú–∏–Ω–∏–≤—ç–Ω"))
    bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@bot.message_handler(func=lambda msg: True)
def handle(message):
    user_id = message.chat.id
    state = user_state.get(user_id, None)

    if not state:
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        return

    step = state["step"]

    # 1Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if step == "category":
        state["filters"]["category"] = category_map.get(message.text.lower(), message.text.lower())
        state["step"] = "fuel"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∞–∑", "–≠–ª–µ–∫—Ç—Ä–æ")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", reply_markup=markup)
        return

    # 2Ô∏è‚É£ –¢–æ–ø–ª–∏–≤–æ
    if step == "fuel":
        fuel_api = fuel_map.get(message.text.lower(), message.text.lower())
        state["filters"]["fuel_type"] = fuel_api
        state["step"] = "price"

        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("5000‚Äì10000$", "10000‚Äì15000$", "15000‚Äì20000$")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:", reply_markup=markup)
        return

    # 3Ô∏è‚É£ –¶–µ–Ω–∞
    if step == "price":
        price_min, price_max = price_map.get(message.text, (0, 1_000_000))
        state["filters"]["price_min"] = price_min
        state["filters"]["price_max"] = price_max
        state["step"] = "done"

        # --- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—à–∏–Ω—ã ---
        try:
            response = requests.get(API_URL, timeout=5)
            cars = response.json()
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            user_state.pop(user_id, None)
            return

        # --- –§–∏–ª—å—Ç—Ä—É–µ–º –≤ –±–æ—Ç–µ ---
        filtered_cars = []
        for car in cars:
            if car['category'] != state["filters"]["category"]:
                continue
            if car['fuel_type'] != state["filters"]["fuel_type"]:
                continue
            if not (price_min <= float(car['price']) <= price_max):
                continue
            filtered_cars.append(car)

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
        if filtered_cars:
            for car in filtered_cars:
                caption = (
                    f"üöó {car['brand']} {car['model']}\n"
                    f"üí∞ –¶–µ–Ω–∞: {car['price']} $\n"
                    f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {car['category']}\n"
                    f"‚ö° –¢–æ–ø–ª–∏–≤–æ: {car['fuel_type']}\n"
                    f"üìù {car.get('description', '')}"
                )
                if car.get("image"):
                    try:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ requests –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
                        response = requests.get(car["image"])
                        photo = BytesIO(response.content)
                        bot.send_photo(user_id, photo, caption=caption)
                    except Exception as e:
                        bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {e}\n{caption}")
                else:
                    bot.send_message(user_id, caption)
        else:
            bot.send_message(user_id, "‚ùå –ê–≤—Ç–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # --- –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        user_state.pop(user_id, None)

bot.polling(none_stop=True)
